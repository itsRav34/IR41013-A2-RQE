classdef laser < handle

%#ok<*NOPRT>

    methods
        function self = laser ()
			% clf
            set(0,'DefaultFigureWindowStyle','docked')		
            % self.Part1();
            self.Part2();
        end
    end

    methods (Static)

%% Part2
% As well as the way shown in the previous part, there is also
% another function in the toolbox called LinePlaneIntersection.     
        function Part2()
            % clf
            % A plane can be defined with the following point and normal vector
            planeNormal = [-1,0,0];
            planePoint = [0.5,0,0]; %position of a person
            
            % Then if we have a line (perhaps a robot's link) represented by two points:            
            lineStartPoint = [0.5,0.8,0.5];
            lineEndPoint = [0.5,-3.3,0.5];
            lineStartPoint1 = [0.5,-3.5,0];
            lineEndPoint1 = [-2.7,-3.5,0];
            lineStartPoint1 = [0.5,-3.5,0];
            lineEndPoint1 = [-2.7,-3.5,0];


            % Then we can use the function to calculate the point of
            % intersection between the line (line) and plane (obstacle) 
            [intersectionPoints,check] = LinePlaneIntersection(planeNormal,planePoint,lineStartPoint,lineStartPoint1,lineEndPoint,lineEndPoint2);
            
            % The returned values and their means are as follows:
            % (1) intersectionPoints, which shows the xyz point where the line
            intersectionPoints
            
            % (2) check intersects the plane check, which is defined as follows:
            check 
            % Check == 0 if there is no intersection
            % Check == 1 if there is a line plane intersection between the two points
            % Check == 2 if the segment lies in the plane (always intersecting)
            % Check == 3 if there is intersection point which lies outside line segment
            
            % We can visualise this as follows by first creating and
            % plotting a plane, which conforms to the previously defined planePoint and planeNormal                
            % [Y,Z] = meshgrid(-2:0.1:2,-2:0.1:2);
            % X = repmat(1.5,size(Y,1),size(Y,2));
            % surf(X,Y,Z);
            PlaceObject('personMaleCasual.ply', [0.5,0,0]);
            
            % Then plot the start and end point in green and red, respectively.            
            hold on;
            plot3(lineStartPoint(1),lineStartPoint(2),lineStartPoint(3) ,'r*');
            plot3(lineEndPoint(1),lineEndPoint(2),lineEndPoint(3) ,'r*');
            plot3(lineStartPoint1(1),lineStartPoint1(2),lineStartPoint1(3) ,'r*');
            plot3(lineEndPoint1(1),lineEndPoint1(2),lineEndPoint1(3) ,'r*');
            plot3(lineStartPoint2(1),lineStartPoint2(2),lineStartPoint2(3) ,'r*');
            plot3(lineEndPoint2(1),lineEndPoint2(2),lineEndPoint2(3) ,'r*');
            plot3([lineStartPoint(1),lineEndPoint(1),lineStartPoint1(1),lineEndPoint1(1),lineStartPoint2(1),lineEndPoint2(1)],[lineStartPoint(2),lineEndPoint(2),lineStartPoint1(2),lineEndPoint1(2),lineStartPoint2(2),lineEndPoint2(2)],[lineStartPoint(3),lineEndPoint(3),lineStartPoint1(3),lineEndPoint1(3),lineStartPoint2(3),lineEndPoint2(3)] ,'r');
            plot3(intersectionPoints(1),intersectionPoints(2),intersectionPoints(3) ,'k*','MarkerSize',20);

            axis equal
        end

%% CheckCollision
% Checks for collisions with a sphere and can be modified to return an
% isCollision result
        % function CheckCollision(robot, sphereCenter, radius)
        function isCollision = CheckCollision(robot, sphereCenter, radius)

            tr = robot.fkine(robot.getpos).T;
            endEffectorToCenterDist = sqrt(sum((sphereCenter-tr(1:3,4)').^2));
            if endEffectorToCenterDist <= radius
                disp('Oh no a collision!');
                isCollision = 1;
            else
                disp(['SAFE: End effector to sphere centre distance (', num2str(endEffectorToCenterDist), 'm) is more than the sphere radius, ' num2str(radius), 'm']);
                isCollision = 0;
            end
        
        end
    end
end

